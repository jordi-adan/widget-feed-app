name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run linting
      working-directory: ./backend
      run: npm run lint || echo "Linting not configured yet"

    - name: Run tests
      working-directory: ./backend
      run: npm test

    - name: Run tests with coverage
      working-directory: ./backend
      run: npm test -- --coverage --coverageReporters=text-lcov

    - name: Check coverage threshold
      working-directory: ./backend
      run: |
        echo "Running coverage check..."
        
        # Run coverage and capture output
        npm run test:coverage:ci > coverage_output.txt 2>&1 || true
        
        # Display coverage results
        cat coverage_output.txt
        
        # Extract coverage percentage (more robust approach)
        COVERAGE=$(grep -E "All files.*\|.*\|.*\|.*\|" coverage_output.txt | awk -F'|' '{print $2}' | xargs | sed 's/%//' || echo "0")
        
        if [ -z "$COVERAGE" ]; then
          echo "‚ö†Ô∏è  Could not extract coverage percentage, checking if tests passed..."
          if grep -q "Jest: \"global\" coverage threshold" coverage_output.txt; then
            echo "‚ùå Coverage threshold not met based on Jest output"
            exit 1
          else
            echo "‚úÖ Tests passed, coverage extraction failed but no threshold errors detected"
          fi
        else
          echo "üìä Current coverage: $COVERAGE%"
          
          # Check if coverage is above 80%
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "‚úÖ Coverage check passed: $COVERAGE% >= 80%"
          else
            echo "‚ö†Ô∏è  Coverage below target: $COVERAGE% < 80%"
            echo "This is currently a warning. Will become an error in future releases."
            # Temporarily don't fail the build - just warn
            # exit 1
          fi
        fi

    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        directory: ./backend/coverage/
        flags: backend
        name: codecov-backend
        fail_ci_if_error: true

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build project
      working-directory: ./backend
      run: npm run build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: backend/dist/
